type = 'lower',
order = "original",
col='black', method="number", cl.pos = "n", tl.cex=.50, number.cex=0.50)
## Residual Covariance Matrix
covraw <- lavResiduals(fit,type="raw")$cov
corrplot::corrplot(covraw, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Standardized Residual Matrix
covstd <- lavResiduals(fit,type="raw")$cov.z
corrplot::corrplot(covstd, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Residual Correlation Matrix
r <- resid(fit, "cor")$cov # Residuals on cor
corrplot::corrplot(r, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Modification Indices for Correlation
mi_corr <- modindices(fit, sort.=TRUE, power=TRUE, high.power = 0.75,
na.remove=TRUE, op="~~", maximum.number=10)
mi_corr <- mi_corr[which(mi_corr$lhs %in% fit@pta$vnames$ov[[1]]),]
mi_corr <- mi_corr[,c(-6,-8)]
rownames(mi_corr) <- NULL
kable(mi_corr,col.names=c("Left","Operator","Right","Modification Index",
"Expected Parameter Change", "Delta", "Power", "Decision"),
digits=3, caption="Modification Indices With Respect To Error Covariances",
linesep = '', longtable=T)
## Modification Indices for Factor Loadings
mi_fl <- modindices(fit, sort.=TRUE, power=TRUE, high.power = 0.75,
na.remove=TRUE, op="=~", delta=0.4, maximum.number=10)
mi_fl <- mi_fl[,c(-6,-8)]
rownames(mi_fl) <- NULL
kable(mi_fl,col.names=c("Left","Operator","Right","Modification Index",
"Expected Parameter Change", "Delta", "Power", "Decision"),
digits=3, caption="Modification Indices With Respect To Factor Loadings",
linesep = '', longtable=T)
## Path Diagram
semPaths(fit, what="std", intercepts = FALSE)
setwd("~/GitHub/Confirmatory-factor-analysis/Cases/case5_8v_2f")
# Import required libraries
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(lavaan))
suppressPackageStartupMessages(library(semPlot))
suppressPackageStartupMessages(library(semTools))
suppressPackageStartupMessages(library(corrplot))
# Define the path to your data (please remark the forward slash)
filepath <-"case5.csv"
# Upload the data
df <- fread(filepath, header ="auto", sep ="auto", dec =".", encoding ="UTF-8", data.table
= FALSE, na.strings = "")
# Model Definition (please remark the single quotation marks enclosing the equations)
model <-
'
Sequent=~handmov+numbrec+wordord
Simul=~gesclos+triangle+spatmem+matanalg+photser
'
# Model Fit Unstandardized
fit <- cfa(model, data=df, estimator="ML")
## Parameter Estimates
pe <- parameterEstimates(fit, rsquare = TRUE)
# Check Model Equations
info <- inspect(fit, what="list")
info <- info[,c(2,3,4,5,8)]
# Model Fit Standardized Observed Variables
fit2 <- cfa(model, data=df, estimator="ML", std.ov=TRUE)
## Parameter Estimates
pe_stand <- standardizedsolution(fit2, type="std.all")
# Outputs
## Summary Unstandardized Parameter Estimates
summary(fit, fit.measures=TRUE)
## Summary Completely Standardized Parameter Estimates
standardizedSolution(fit2, type="std.all", output="text")
## Communality
if ("label" %in% colnames(pe)) pe$label <- NULL
r2 <- pe[pe$op=="r2",c(1,4)]
r2 <- r2[order(r2$lhs),]
colnames(r2) <- c("Variable","Communality")
rownames(r2) <- NULL
r2
## Factor Discriminant Validity
discr <- suppressMessages(discriminantValidity(fit, cutoff = 0.85))
discr <- discr[,c(1:4,11:13)]
discr <- discr[!is.na(discr$`Pr(>Chisq)`),]
kable(discr,caption="Factor Discriminant Validity Test at Cutoff 0.85",digits=3,
row.names = NA, linesep = '', col.names =
c("","","","Factor Correlation","Chisq diff","Df diff","P-Value"))
## Factor Reliability
rel <- reliability(fit, return.total = TRUE, dropSingle = FALSE,
omit.imps = c("no.conv", "no.se", "no.npd"))
rel <- rel[3:5,]
rel <- as.data.frame(rel)
rownames(rel) <- c("Omega (Bentler)","Omega (McDonald)","AVE")
### Colname for single factor case
if (length(fit@pta$vnames$lv.x[[1]])==1) colnames(rel) <- fit@pta$vnames$lv.x[[1]]
rel_transpose <- as.data.frame(t(rel))
rel_transpose <- rel_transpose[1:(nrow(rel_transpose)-1),]
### Output table
opts <- options(knitr.kable.NA = "Not provided in case of cross-loadings")
kable(rel, caption="Factor Reliability",digits=2, linesep = '', longtable=T)
options(opts)
## Observed Covariance Matrix
obscov <- inspect(fit, "sampstat")$cov
corrplot::corrplot(obscov, is.corr = FALSE,
type = 'lower',
order = "original",
col='black', method="number", cl.pos = "n", tl.cex=.50, number.cex=0.50)
## Model-Implied Covariance Matrix
fittedcov <- inspect(fit, what="cov.ov") # Fitted cov
corrplot::corrplot(fittedcov, is.corr = FALSE,
type = 'lower',
order = "original",
col='black', method="number", cl.pos = "n", tl.cex=.50, number.cex=0.50)
## Residual Covariance Matrix
covraw <- lavResiduals(fit,type="raw")$cov
corrplot::corrplot(covraw, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Standardized Residual Matrix
covstd <- lavResiduals(fit,type="raw")$cov.z
corrplot::corrplot(covstd, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Residual Correlation Matrix
r <- resid(fit, "cor")$cov # Residuals on cor
corrplot::corrplot(r, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Modification Indices for Correlation
mi_corr <- modindices(fit, sort.=TRUE, power=TRUE, high.power = 0.75,
na.remove=TRUE, op="~~", maximum.number=10)
mi_corr <- mi_corr[which(mi_corr$lhs %in% fit@pta$vnames$ov[[1]]),]
mi_corr <- mi_corr[,c(-6,-8)]
rownames(mi_corr) <- NULL
kable(mi_corr,col.names=c("Left","Operator","Right","Modification Index",
"Expected Parameter Change", "Delta", "Power", "Decision"),
digits=3, caption="Modification Indices With Respect To Error Covariances",
linesep = '', longtable=T)
## Modification Indices for Factor Loadings
mi_fl <- modindices(fit, sort.=TRUE, power=TRUE, high.power = 0.75,
na.remove=TRUE, op="=~", delta=0.4, maximum.number=10)
mi_fl <- mi_fl[,c(-6,-8)]
rownames(mi_fl) <- NULL
kable(mi_fl,col.names=c("Left","Operator","Right","Modification Index",
"Expected Parameter Change", "Delta", "Power", "Decision"),
digits=3, caption="Modification Indices With Respect To Factor Loadings",
linesep = '', longtable=T)
## Path Diagram
semPaths(fit, what="std", intercepts = FALSE)
setwd("~/GitHub/Confirmatory-factor-analysis/Cases/case4_12v_3f")
# Import required libraries
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(lavaan))
suppressPackageStartupMessages(library(semPlot))
suppressPackageStartupMessages(library(semTools))
suppressPackageStartupMessages(library(corrplot))
# Define the path to your data (please remark the forward slash)
filepath <-"case4.csv"
# Upload the data
df <- fread(filepath, header ="auto", sep ="auto", dec =".", encoding ="UTF-8", data.table
= FALSE, na.strings = "")
# Model Definition (please remark the single quotation marks enclosing the equations)
model <-
'
Coping=~x1+x2+x3+x4
Social=~x5+x6+x7+x8
Enhance=~x9+x10+x11+x12
'
# Model Fit Unstandardized
fit <- cfa(model, data=df, estimator="ML")
## Parameter Estimates
pe <- parameterEstimates(fit, rsquare = TRUE)
# Check Model Equations
info <- inspect(fit, what="list")
info <- info[,c(2,3,4,5,8)]
# Model Fit Standardized Observed Variables
fit2 <- cfa(model, data=df, estimator="ML", std.ov=TRUE)
## Parameter Estimates
pe_stand <- standardizedsolution(fit2, type="std.all")
# Outputs
## Summary Unstandardized Parameter Estimates
summary(fit, fit.measures=TRUE)
## Summary Completely Standardized Parameter Estimates
standardizedSolution(fit2, type="std.all", output="text")
## Communality
if ("label" %in% colnames(pe)) pe$label <- NULL
r2 <- pe[pe$op=="r2",c(1,4)]
r2 <- r2[order(r2$lhs),]
colnames(r2) <- c("Variable","Communality")
rownames(r2) <- NULL
r2
## Factor Discriminant Validity
discr <- suppressMessages(discriminantValidity(fit, cutoff = 0.85))
discr <- discr[,c(1:4,11:13)]
discr <- discr[!is.na(discr$`Pr(>Chisq)`),]
kable(discr,caption="Factor Discriminant Validity Test at Cutoff 0.85",digits=3,
row.names = NA, linesep = '', col.names =
c("","","","Factor Correlation","Chisq diff","Df diff","P-Value"))
## Factor Reliability
rel <- reliability(fit, return.total = TRUE, dropSingle = FALSE,
omit.imps = c("no.conv", "no.se", "no.npd"))
rel <- rel[3:5,]
rel <- as.data.frame(rel)
rownames(rel) <- c("Omega (Bentler)","Omega (McDonald)","AVE")
### Colname for single factor case
if (length(fit@pta$vnames$lv.x[[1]])==1) colnames(rel) <- fit@pta$vnames$lv.x[[1]]
rel_transpose <- as.data.frame(t(rel))
rel_transpose <- rel_transpose[1:(nrow(rel_transpose)-1),]
### Output table
opts <- options(knitr.kable.NA = "Not provided in case of cross-loadings")
kable(rel, caption="Factor Reliability",digits=2, linesep = '', longtable=T)
options(opts)
## Observed Covariance Matrix
obscov <- inspect(fit, "sampstat")$cov
corrplot::corrplot(obscov, is.corr = FALSE,
type = 'lower',
order = "original",
col='black', method="number", cl.pos = "n", tl.cex=.50, number.cex=0.50)
## Model-Implied Covariance Matrix
fittedcov <- inspect(fit, what="cov.ov") # Fitted cov
corrplot::corrplot(fittedcov, is.corr = FALSE,
type = 'lower',
order = "original",
col='black', method="number", cl.pos = "n", tl.cex=.50, number.cex=0.50)
## Residual Covariance Matrix
covraw <- lavResiduals(fit,type="raw")$cov
corrplot::corrplot(covraw, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Standardized Residual Matrix
covstd <- lavResiduals(fit,type="raw")$cov.z
corrplot::corrplot(covstd, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Residual Correlation Matrix
r <- resid(fit, "cor")$cov # Residuals on cor
corrplot::corrplot(r, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Modification Indices for Correlation
mi_corr <- modindices(fit, sort.=TRUE, power=TRUE, high.power = 0.75,
na.remove=TRUE, op="~~", maximum.number=10)
mi_corr <- mi_corr[which(mi_corr$lhs %in% fit@pta$vnames$ov[[1]]),]
mi_corr <- mi_corr[,c(-6,-8)]
rownames(mi_corr) <- NULL
kable(mi_corr,col.names=c("Left","Operator","Right","Modification Index",
"Expected Parameter Change", "Delta", "Power", "Decision"),
digits=3, caption="Modification Indices With Respect To Error Covariances",
linesep = '', longtable=T)
## Modification Indices for Factor Loadings
mi_fl <- modindices(fit, sort.=TRUE, power=TRUE, high.power = 0.75,
na.remove=TRUE, op="=~", delta=0.4, maximum.number=10)
mi_fl <- mi_fl[,c(-6,-8)]
rownames(mi_fl) <- NULL
kable(mi_fl,col.names=c("Left","Operator","Right","Modification Index",
"Expected Parameter Change", "Delta", "Power", "Decision"),
digits=3, caption="Modification Indices With Respect To Factor Loadings",
linesep = '', longtable=T)
## Path Diagram
semPaths(fit, what="std", intercepts = FALSE)
setwd("~/GitHub/Confirmatory-factor-analysis/Cases/case3_8v_2f")
# Import required libraries
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(lavaan))
suppressPackageStartupMessages(library(semPlot))
suppressPackageStartupMessages(library(semTools))
suppressPackageStartupMessages(library(corrplot))
# Define the path to your data (please remark the forward slash)
filepath <-"neuroticism.csv"
# Upload the data
df <- fread(filepath, header ="auto", sep ="auto", dec =".", encoding ="unknown", data.table
= FALSE, na.strings = "")
# Convert characters to UTF-8 encoding
## Depending on your local R settings
## you could try to ignore and skip the next 4 lines
colnames(df) <- iconv(colnames(df),"ASCII","UTF-8")
col_names <- sapply(df, is.character)
df[ ,col_names] <- sapply(df[, col_names], function(col) iconv(col, "ASCII", "UTF-8"))
# Model Definition (please remark the single quotation marks enclosing the equations)
model <-
'
NEUROT=~N1+N2+N3+N4
EXTRAV=~E1+E2+E3+E4
'
# Model Fit Unstandardized
fit <- cfa(model, data=df, estimator="ML")
## Parameter Estimates
pe <- parameterEstimates(fit, rsquare = TRUE)
# Check Model Equations
info <- inspect(fit, what="list")
info <- info[,c(2,3,4,5,8)]
# Model Fit Standardized Observed Variables
fit2 <- cfa(model, data=df, estimator="ML", std.ov=TRUE)
## Parameter Estimates
pe_stand <- standardizedsolution(fit2, type="std.all")
# Outputs
## Summary Unstandardized Parameter Estimates
summary(fit, fit.measures=TRUE)
## Summary Completely Standardized Parameter Estimates
standardizedSolution(fit2, type="std.all", output="text")
## Communality
if ("label" %in% colnames(pe)) pe$label <- NULL
r2 <- pe[pe$op=="r2",c(1,4)]
r2 <- r2[order(r2$lhs),]
colnames(r2) <- c("Variable","Communality")
rownames(r2) <- NULL
r2
## Factor Discriminant Validity
discr <- suppressMessages(discriminantValidity(fit, cutoff = 0.85))
discr <- discr[,c(1:4,11:13)]
discr <- discr[!is.na(discr$`Pr(>Chisq)`),]
kable(discr,caption="Factor Discriminant Validity Test at Cutoff 0.85",digits=3,
row.names = NA, linesep = '', col.names =
c("","","","Factor Correlation","Chisq diff","Df diff","P-Value"))
## Factor Reliability
rel <- reliability(fit, return.total = TRUE, dropSingle = FALSE,
omit.imps = c("no.conv", "no.se", "no.npd"))
rel <- rel[3:5,]
rel <- as.data.frame(rel)
rownames(rel) <- c("Omega (Bentler)","Omega (McDonald)","AVE")
### Colname for single factor case
if (length(fit@pta$vnames$lv.x[[1]])==1) colnames(rel) <- fit@pta$vnames$lv.x[[1]]
rel_transpose <- as.data.frame(t(rel))
rel_transpose <- rel_transpose[1:(nrow(rel_transpose)-1),]
### Output table
opts <- options(knitr.kable.NA = "Not provided in case of cross-loadings")
kable(rel, caption="Factor Reliability",digits=2, linesep = '', longtable=T)
options(opts)
## Observed Covariance Matrix
obscov <- inspect(fit, "sampstat")$cov
corrplot::corrplot(obscov, is.corr = FALSE,
type = 'lower',
order = "original",
col='black', method="number", cl.pos = "n", tl.cex=.50, number.cex=0.50)
## Model-Implied Covariance Matrix
fittedcov <- inspect(fit, what="cov.ov") # Fitted cov
corrplot::corrplot(fittedcov, is.corr = FALSE,
type = 'lower',
order = "original",
col='black', method="number", cl.pos = "n", tl.cex=.50, number.cex=0.50)
## Residual Covariance Matrix
covraw <- lavResiduals(fit,type="raw")$cov
corrplot::corrplot(covraw, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Standardized Residual Matrix
covstd <- lavResiduals(fit,type="raw")$cov.z
corrplot::corrplot(covstd, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Residual Correlation Matrix
r <- resid(fit, "cor")$cov # Residuals on cor
corrplot::corrplot(r, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Modification Indices for Correlation
mi_corr <- modindices(fit, sort.=TRUE, power=TRUE, high.power = 0.75,
na.remove=TRUE, op="~~", maximum.number=10)
mi_corr <- mi_corr[which(mi_corr$lhs %in% fit@pta$vnames$ov[[1]]),]
mi_corr <- mi_corr[,c(-6,-8)]
rownames(mi_corr) <- NULL
kable(mi_corr,col.names=c("Left","Operator","Right","Modification Index",
"Expected Parameter Change", "Delta", "Power", "Decision"),
digits=3, caption="Modification Indices With Respect To Error Covariances",
linesep = '', longtable=T)
## Modification Indices for Factor Loadings
mi_fl <- modindices(fit, sort.=TRUE, power=TRUE, high.power = 0.75,
na.remove=TRUE, op="=~", delta=0.4, maximum.number=10)
mi_fl <- mi_fl[,c(-6,-8)]
rownames(mi_fl) <- NULL
kable(mi_fl,col.names=c("Left","Operator","Right","Modification Index",
"Expected Parameter Change", "Delta", "Power", "Decision"),
digits=3, caption="Modification Indices With Respect To Factor Loadings",
linesep = '', longtable=T)
## Path Diagram
semPaths(fit, what="std", intercepts = FALSE)
setwd("~/GitHub/Confirmatory-factor-analysis/Cases/Case1_9v_3f")
# Import required libraries
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(lavaan))
suppressPackageStartupMessages(library(semPlot))
suppressPackageStartupMessages(library(semTools))
suppressPackageStartupMessages(library(corrplot))
# Define the path to your data (please remark the forward slash)
filepath <-"case1.csv"
# Upload the data
df <- fread(filepath, header ="auto", sep ="auto", dec =".", encoding ="unknown", data.table
= FALSE, na.strings = "")
# Convert characters to UTF-8 encoding
## Depending on your local R settings
## you could try to ignore and skip the next 4 lines
colnames(df) <- iconv(colnames(df),"ASCII","UTF-8")
col_names <- sapply(df, is.character)
df[ ,col_names] <- sapply(df[, col_names], function(col) iconv(col, "ASCII", "UTF-8"))
# Model Definition (please remark the single quotation marks enclosing the equations)
model <-
'
visual=~x1+x2+x3
textual=~x4+x5+x6
speed=~x7+x8+x9
'
# Model Fit Unstandardized
fit <- cfa(model, data=df, estimator="ML")
## Parameter Estimates
pe <- parameterEstimates(fit, rsquare = TRUE)
# Check Model Equations
info <- inspect(fit, what="list")
info <- info[,c(2,3,4,5,8)]
# Model Fit Standardized Observed Variables
fit2 <- cfa(model, data=df, estimator="ML", std.ov=TRUE)
## Parameter Estimates
pe_stand <- standardizedsolution(fit2, type="std.all")
# Outputs
## Summary Unstandardized Parameter Estimates
summary(fit, fit.measures=TRUE)
## Summary Completely Standardized Parameter Estimates
standardizedSolution(fit2, type="std.all", output="text")
## Communality
if ("label" %in% colnames(pe)) pe$label <- NULL
r2 <- pe[pe$op=="r2",c(1,4)]
r2 <- r2[order(r2$lhs),]
colnames(r2) <- c("Variable","Communality")
rownames(r2) <- NULL
r2
## Factor Discriminant Validity
discr <- suppressMessages(discriminantValidity(fit, cutoff = 0.85))
discr <- discr[,c(1:4,11:13)]
discr <- discr[!is.na(discr$`Pr(>Chisq)`),]
kable(discr,caption="Factor Discriminant Validity Test at Cutoff 0.85",digits=3,
row.names = NA, linesep = '', col.names =
c("","","","Factor Correlation","Chisq diff","Df diff","P-Value"))
## Factor Reliability
rel <- reliability(fit, return.total = TRUE, dropSingle = FALSE,
omit.imps = c("no.conv", "no.se", "no.npd"))
rel <- rel[3:5,]
rel <- as.data.frame(rel)
rownames(rel) <- c("Omega (Bentler)","Omega (McDonald)","AVE")
### Colname for single factor case
if (length(fit@pta$vnames$lv.x[[1]])==1) colnames(rel) <- fit@pta$vnames$lv.x[[1]]
rel_transpose <- as.data.frame(t(rel))
rel_transpose <- rel_transpose[1:(nrow(rel_transpose)-1),]
### Output table
opts <- options(knitr.kable.NA = "Not provided in case of cross-loadings")
kable(rel, caption="Factor Reliability",digits=2, linesep = '', longtable=T)
options(opts)
## Observed Covariance Matrix
obscov <- inspect(fit, "sampstat")$cov
corrplot::corrplot(obscov, is.corr = FALSE,
type = 'lower',
order = "original",
col='black', method="number", cl.pos = "n", tl.cex=.50, number.cex=0.50)
## Model-Implied Covariance Matrix
fittedcov <- inspect(fit, what="cov.ov") # Fitted cov
corrplot::corrplot(fittedcov, is.corr = FALSE,
type = 'lower',
order = "original",
col='black', method="number", cl.pos = "n", tl.cex=.50, number.cex=0.50)
## Residual Covariance Matrix
covraw <- lavResiduals(fit,type="raw")$cov
corrplot::corrplot(covraw, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Standardized Residual Matrix
covstd <- lavResiduals(fit,type="raw")$cov.z
corrplot::corrplot(covstd, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Residual Correlation Matrix
r <- resid(fit, "cor")$cov # Residuals on cor
corrplot::corrplot(r, is.corr = FALSE,
type = 'lower',
order = "original",
tl.col='black', tl.cex=.50, number.cex=0.50, method="number")
## Modification Indices for Correlation
mi_corr <- modindices(fit, sort.=TRUE, power=TRUE, high.power = 0.75,
na.remove=TRUE, op="~~", maximum.number=10)
mi_corr <- mi_corr[which(mi_corr$lhs %in% fit@pta$vnames$ov[[1]]),]
mi_corr <- mi_corr[,c(-6,-8)]
rownames(mi_corr) <- NULL
kable(mi_corr,col.names=c("Left","Operator","Right","Modification Index",
"Expected Parameter Change", "Delta", "Power", "Decision"),
digits=3, caption="Modification Indices With Respect To Error Covariances",
linesep = '', longtable=T)
## Modification Indices for Factor Loadings
mi_fl <- modindices(fit, sort.=TRUE, power=TRUE, high.power = 0.75,
na.remove=TRUE, op="=~", delta=0.4, maximum.number=10)
mi_fl <- mi_fl[,c(-6,-8)]
rownames(mi_fl) <- NULL
kable(mi_fl,col.names=c("Left","Operator","Right","Modification Index",
"Expected Parameter Change", "Delta", "Power", "Decision"),
digits=3, caption="Modification Indices With Respect To Factor Loadings",
linesep = '', longtable=T)
## Path Diagram
semPaths(fit, what="std", intercepts = FALSE)
